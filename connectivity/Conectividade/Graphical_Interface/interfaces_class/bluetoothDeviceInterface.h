/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp bluetoothdevice.xml -p bluetoothDeviceInterface
 *
 * qdbusxml2cpp is Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef BLUETOOTHDEVICEINTERFACE_H_1451946299
#define BLUETOOTHDEVICEINTERFACE_H_1451946299

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface conectividade.BluetoothDevice
 */
class ConectividadeBluetoothDeviceInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "conectividade.BluetoothDevice"; }

public:
    ConectividadeBluetoothDeviceInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~ConectividadeBluetoothDeviceInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> beginSearch()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("beginSearch"), argumentList);
    }

    inline QDBusPendingReply<> beginSearch(bool status_search_hdp)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(status_search_hdp);
        return asyncCallWithArgumentList(QLatin1String("beginSearch"), argumentList);
    }

    inline QDBusPendingReply<> pairDevice(const QString &address)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(address);
        return asyncCallWithArgumentList(QLatin1String("pairDevice"), argumentList);
    }

    inline QDBusPendingReply<> pairingAcceptation(bool confirmation)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(confirmation);
        return asyncCallWithArgumentList(QLatin1String("pairingAcceptation"), argumentList);
    }

    inline QDBusPendingReply<bool> stopSearch()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("stopSearch"), argumentList);
    }

    inline QDBusPendingReply<> unpairDevice(const QString &address)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(address);
        return asyncCallWithArgumentList(QLatin1String("unpairDevice"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void displayPin(const QString &address, const QString &pin);
    void finishedPairedDevice(const QString &address);
    void finishedSearch();
    void finishedUnpairedDevice(const QString &address);
    void foundDevice(const QString &name, const QString &address, bool situation);
    void pairError();
    void pairingConfirmation(const QString &address, const QString &pin);
    void searchError();
};

namespace conectividade {
  typedef ::ConectividadeBluetoothDeviceInterface BluetoothDevice;
}
#endif
